When would you want to use a remote repository rather than keeping all your work local?

It would be really useful to use a remote repository on github if you were away from your workspace in terminal and still wanted to update a repository. You would be able to edit and update your repository with files. Also if you were working in a group it and wanted to share files or transfer them to your repository from someone else's you would use a remote.


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

To stay in control of what version of the file is current locally and on the remote, you wouldnâ€™t want it automatically pushing and pulling, should lead to all kind of problems and unneeded commits and would make git merge a potential nightmare of errors.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks allow you to copy a repository on github, clones allow you to copy a repository from github to your local machine and branches are structural allow you to keep your workflow as simple or complicated as your project needs or your brain tells you to. Forks allow collaboration with others so you'd use a fork if a group of people were all working on the same project files.


What is the benefit of having a copy of the last known state of the remote stored locally?

You can easily cross reference the copies and if needs be revert to it. Also if collaborating you can use it as a base to work from then merge at a later point.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

You could collaborate using a shared file on something like google docs. The advantage would be a lack of a need to go through the Git commands and use GitHub. However you would not have the advantages of being able to work on seperate branches, merge files and find out where any conflicts appeared very easily.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

You may want to make a change on a seperate branch when you are working on a foreign language version your project or site. Those changes would be specific to that site only and not relevant to the main  site. Keeping branches seperate means that they can be played with wothout fear of affecting the main branch in any way, this could be really useful! On the other hand, if you chose to work on a branch instead of master for an extended period you may end up slipping up on a lot of conflicts if you merge and this could take a very long time to unpick.


